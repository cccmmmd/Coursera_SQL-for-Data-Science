Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	

SELECT COUNT(*)
FROM Category


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 10000
vi. Checkin = 493 
vii. Photo = 10000
viii. Tip = 3979 (business_id)
ix. User = 10000
x. Friend = 11
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	

SELECT COUNT(DISTINCT business_id)
FROM Category

3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No!
	
	
	SQL code used to arrive at answer:
	
	SELECT *
FROM user
WHERE id IS NULL OR name IS NULL OR review_count IS NULL OR 
yelping_since IS NULL OR useful IS NULL OR funny IS NULL OR cool IS NULL OR fans IS NULL OR
 average_stars IS NULL OR compliment_hot IS NULL OR compliment_profile IS NULL OR 
 compliment_cute IS NULL OR compliment_list IS NULL OR compliment_note IS NULL OR 
 compliment_plain IS NULL OR compliment_cool IS NULL OR compliment_funny IS NULL OR
 compliment_writer IS NULL OR compliment_photos IS NULL


	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:	1.0	max:	5.0	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max:	53	avg:  1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max: 2000		avg:24.2995
		
SELECT MIN(Review_count)
FROM User

SELECT MAX(Review_count)
FROM User

SELECT AVG(Review_count)
FROM User

5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
SELECT city, sUM(review_count) AS totalreview
FROM business
GROUP BY city
ORDER BY totalreview desc 

	
	
	Copy and Paste the Result Below:
	
+-----------------+-------------+
| city            | totalreview |
+-----------------+-------------+
| Las Vegas       |       82854 |
| Phoenix         |       34503 |
| Toronto         |       24113 |
| Scottsdale      |       20614 |
| Charlotte       |       12523 |
| Henderson       |       10871 |
| Tempe           |       10504 |
| Pittsburgh      |        9798 |
| Montréal        |        9448 |
| Chandler        |        8112 |
| Mesa            |        6875 |
| Gilbert         |        6380 |
| Cleveland       |        5593 |
| Madison         |        5265 |
| Glendale        |        4406 |
| Mississauga     |        3814 |
| Edinburgh       |        2792 |
| Peoria          |        2624 |
| North Las Vegas |        2438 |
| Markham         |        2352 |
| Champaign       |        2029 |
| Stuttgart       |        1849 |
| Surprise        |        1520 |
| Lakewood        |        1465 |
| Goodyear        |        1155 |
+-----------------+-------------+
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SELECT stars AS star, COUNT(stars) AS count
FROM business
WHERE city = 'Avon'
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+------+-------+
| star | count |
+------+-------+
|  1.5 |     1 |
|  2.5 |     2 |
|  3.5 |     3 |
|  4.0 |     2 |
|  4.5 |     1 |
|  5.0 |     1 |
+------+-------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT stars AS star, COUNT(stars) AS count
FROM business
WHERE city = 'Beachwood'
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
		
+------+-------+
| star | count |
+------+-------+
|  2.0 |     1 |
|  2.5 |     1 |
|  3.0 |     2 |
|  3.5 |     2 |
|  4.0 |     1 |
|  4.5 |     2 |
|  5.0 |     5 |
+------+-------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
SELECT name, review_count
FROM user
ORDER BY review_count DESC
LIMIT 3
		
	Copy and Paste the Result Below:
		
+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
Yes!
SQL Code
 
Review base:
SELECT fans_range, COUNT(*) AS total_people, AVG(review_count) AS avg_review_count
FROM (SELECT CASE  
        WHEN fans BETWEEN 0 AND 9 THEN 'fans < 100'
        WHEN fans BETWEEN 10 AND 99 THEN '100 <= fans < 1000'
        ELSE 'fans >= 1000' END AS fans_range,
        review_count, 
        fans
    FROM user
) 
GROUP BY fans_range

+--------------------+--------------+------------------+
| fans_range         | total_people | avg_review_count |
+--------------------+--------------+------------------+
| 100 <= fans < 1000 |          294 |    283.326530612 |
| fans < 100         |         9690 |    15.0085655315 |
| fans >= 1000       |           16 |            891.5 |
+--------------------+--------------+------------------+


Fans base: 
SELECT review_range, COUNT(*) AS total_people, AVG(fans) AS avg_fans
FROM (SELECT CASE  
        WHEN review_count BETWEEN 0 AND 99 THEN 'review_count < 100'
        WHEN review_count BETWEEN 100 AND 999 THEN '100 <= review_count < 1000'
        ELSE 'review_count >= 1000' END AS review_range,
        review_count, 
        fans
    FROM user
) 
GROUP BY review_range
+----------------------------+--------------+----------------+
| review_range               | total_people |       avg_fans |
+----------------------------+--------------+----------------+
| 100 <= review_count < 1000 |          507 |  19.2702169625 |
| review_count < 100         |         9485 | 0.431101739589 |
| review_count >= 1000       |            8 |        129.625 |
+----------------------------+--------------+----------------+
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
	more reviews with the word "love"

	SQL code used to arrive at answer:

SELECT feedback, COUNT(*) AS count
FROM( SELECT CASE
 WHEN LOWER(text) LIKE '%love%' THEN 'love'
 WHEN LOWER(text) LIKE '%hate%' THEN 'hate'
 ELSE NULL END feedback
FROM review
)
GROUP BY feedback
ORDER BY count DESC

+----------+-------+
| feedback | count |
+----------+-------+
|     None |  8042 |
|     love |  1780 |
|     hate |   178 |
+----------+-------+
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
SELECT name, fans
FROM user
ORDER BY fans DESC 
LIMIT 10
	
	
	Copy and Paste the Result Below:

+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	

I choose "Phoenix" and "Restaurants" category.

i. Do the two groups you chose to analyze have a different distribution of hours?

There is no different distribution of hours between two groups.

SELECT 
    CASE WHEN b.stars >= 4.0 THEN '4 up'
    WHEN b.stars >= 2.0 THEN 'between 2 & 4'
    ELSE '2 lower'
    END stars_range
, COUNT(h.hours) / COUNT(DISTINCT b.id) AS open_days
FROM business AS b
JOIN category AS c
ON b.id = c.business_id
JOIN hours AS h
ON b.id = h.business_id
WHERE city = 'Phoenix' AND category = 'Restaurants'
GROUP BY stars_range

+---------------+-----------+
| stars_range   | open_days |
+---------------+-----------+
| 4 up          |         7 |
| between 2 & 4 |         7 |
+---------------+-----------+


ii. Do the two groups you chose to analyze have a different number of reviews?

Yes! There is different in the total number of review between the two groups

SELECT 
    CASE WHEN b.stars >= 4.0 THEN '4 up'
    WHEN b.stars >= 2.0 THEN 'between 2 & 4'
    ELSE '2 lower'
    END stars_range
, SUM(DISTINCT b.review_count)/COUNT(DISTINCT b.id) AS average_reviews
FROM business AS b
JOIN category AS c
ON b.id = c.business_id
JOIN hours AS h
ON b.id = h.business_id
WHERE city = 'Phoenix' AND category = 'Restaurants'
GROUP BY stars_range
         
+---------------+-----------------+
| stars_range   | average_reviews |
+---------------+-----------------+
| 4 up          |             219 |
| between 2 & 4 |              43 |
+---------------+-----------------+

iii. Are you able to infer anything from the location data provided between these two groups? Explain.

SQL code used for analysis:

SELECT 
    CASE WHEN b.stars >= 4.0 THEN '4 up'
    WHEN b.stars >= 2.0 THEN 'between 2 & 4'
    ELSE '2 lower'
    END stars_range
, b.neighborhood,
b.address,
       b.postal_code
FROM business AS b
JOIN category AS c
ON b.id = c.business_id
JOIN hours AS h
ON b.id = h.business_id
WHERE city = 'Phoenix' AND category = 'Restaurants'
GROUP BY b.id

+---------------+--------------+-------------------------+-------------+
| stars_range   | neighborhood | address                 | postal_code |
+---------------+--------------+-------------------------+-------------+
| between 2 & 4 |              | 2641 N 44th St, Ste 100 | 85008       |
| between 2 & 4 |              | 1850 S 7th St           | 85004       |
| 4 up          |              | 1153 E Jefferson St     | 85034       |
| between 2 & 4 |              | 751 E Union Hls Dr      | 85024       |
| 4 up          |              | 3375 E Shea Blvd        | 85028       |
+---------------+--------------+-------------------------+-------------+

No! the shops are away from each other.
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:

It can be seen that there are many more stores that have opened than those that have not.
         
ii. Difference 2: It can be seen that the number of average review count and average of stars of open-business store are bigger.
         
       
         
SQL code used for analysis:

SELECT
 is_open,
 AVG(review_count), AVG(stars) , COUNT(DISTINCT id)
FROM business
GROUP BY is_open
         

+---------+-------------------+---------------+--------------------+
| is_open | AVG(review_count) |    AVG(stars) | COUNT(DISTINCT id) |
+---------+-------------------+---------------+--------------------+
|       0 |     23.1980263158 | 3.52039473684 |               1520 |
|       1 |     31.7570754717 | 3.67900943396 |               8480 |
+---------+-------------------+---------------+--------------------+

	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:


Which business received the most ratings of four stars or more?

         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

In the category, the categories are sorted from high to low according to the "GOOD" level, that is, the proportion of the number of more than four stars to the overall quantity, and the average open rate of each category. For added credibility, only select categories for businesses with a total of more than 10. 

From the results, we can see that the top five are “Health & Medical”, “Home Services”, “Local Services”, “American (Traditional)” and “Shopping”. They get more than four stars and high open rates. However, "Bars", "Nightlife," and "Restaurants" have lower good_portions and open rates.                       
                  
iii. Output of your finished dataset:

+------------------------+-------------+--------------+--------------+----------+
| category               | good_number | total_number | good_portion | avg_open |
+------------------------+-------------+--------------+--------------+----------+
| Health & Medical       |          13 |           17 |         0.76 |     0.94 |
| Home Services          |          12 |           16 |         0.75 |     0.94 |
| Local Services         |           9 |           12 |         0.75 |     0.83 |
| American (Traditional) |           7 |           11 |         0.64 |     0.73 |
| Shopping               |          19 |           30 |         0.63 |     0.83 |
| Beauty & Spas          |           8 |           13 |         0.62 |     0.92 |
| Food                   |          14 |           23 |         0.61 |     0.87 |
| Bars                   |           8 |           17 |         0.47 |     0.65 |
| Nightlife              |           9 |           20 |         0.45 |      0.6 |
| Restaurants            |          29 |           71 |         0.41 |     0.75 |
+------------------------+-------------+--------------+--------------+----------+

         
iv. Provide the SQL code you used to create your final dataset:

SELECT 
    good_business.category, 
    good_business.good_number, 
    category_number.total_number, 
    ROUND(CAST(good_business.good_number AS float)/CAST(category_number.total_number AS float),2) AS good_portion, 
    category_number.avg_open
FROM (SELECT c.category, CASE
    WHEN b.stars > 3.5 THEN 'GOOD'
    WHEN b.stars > 2.5 THEN 'NORMAL'
    WHEN b.stars > 0 THEN 'NOT GOOD'
    ELSE 'None' END 'level', COUNT(DISTINCT b.id) AS good_number
    FROM business AS b
    JOIN category AS c
    ON b.id = c.business_id
    WHERE level = 'GOOD'
    GROUP BY category
    ORDER By good_number DESC) AS good_business
JOIN ( SELECT c.category, COUNT(DISTINCT b.id) AS total_number, round(AVG(b.is_open),2) AS avg_open
    FROM business AS b
    JOIN category AS c
    ON b.id = c.business_id
    GROUP BY category
    ORDER By total_number DESC
    ) AS category_number
ON good_business.category = category_number.category
WHERE category_number.total_number > 10
ORDER BY good_portion DESC, avg_open DESC
